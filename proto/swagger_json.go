package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x6f\xdc\xd4\x17\xdf\xcf\xa7\xb8\xf2\xff\xbf\x44\x4d\x29\x88\x45\x77\xae\x63\x12\xab\xd3\x99\x60\x7b\xda\x22\x54\x59\x37\xf6\x99\xe9\x6d\x6d\x5f\xf7\x3e\x02\x11\x8a\x04\x4b\x58\x03\x1b\x16\x48\x48\x2c\xd8\xd0\x4a\xbc\x56\x7c\x1c\x92\x7c\x0c\x74\xfd\x98\xf1\x73\xc6\xe3\x69\x94\x44\xea\x48\x95\xea\x7b\xde\xc7\xe7\x77\xce\xb9\xce\x97\x23\x84\x34\xfe\x39\x5e\x2c\x80\x69\xf7\x91\x76\xef\xce\x5d\xed\x3d\x75\x46\xe2\x39\xd5\xee\x23\x45\x47\x48\x13\x44\x84\xa0\xe8\x09\xa3\x82\xee\x45\xc4\x67\xd4\x8b\x70\x18\x7a\x21\x5d\x10\x2e\x88\xcf\xbd\x8c\xb4\x7a\x3e\x96\x9c\xc4\xc0\x79\xcb\xd1\x9d\x94\x37\x35\x84\x90\x76\x02\x8c\x13\x1a\x2b\xf5\xf9\x7f\x51\x4c\x05\xe2\x20\xb4\x11\x42\x67\xa9\x3b\x3e\x8d\xb9\x8c\x80\x6b\xf7\xd1\x67\x99\x14\x4e\x92\x90\xf8\x58\x10\x1a\xef\xbd\xe0\x34\x56\xbc\xcf\x52\xde\x84\xd1\x40\xfa\x3d\x79\xb1\x78\xce\x57\x71\xee\x9d\xbc\xbf\x72\x77\x4f\x89\x9d\x2e\x89\x8a\x9b\x72\x51\x7a\x56\xa9\x93\x51\x84\x99\x62\xd2\x2e\xbe\xfb\xfd\xf2\xf5\xdf\x17\xdf\xfc\x7a\xfe\xe7\xd7\x79\x68\x29\x0b\x4d\x80\xa5\xa6\xad\x40\xb1\x8d\x0b\xf5\x0f\xf2\x64\x38\xc0\x4e\x88\x0f\x9e\xae\xac\x2d\xa9\x65\x0d\x0c\x78\x42\x63\x0e\xbc\x62\x1b\x21\xed\xde\xdd\xbb\xb5\x23\x84\xb4\x00\xb8\xcf\x48\x22\xf2\x94\xea\x88\x4b\xdf\x07\xce\xe7\x32\x44\x85\xa6\x3b\x25\xf5\x59\x1c\xfe\x73\x88\x70\x43\x19\x42\xda\xff\x19\xcc\x95\x9e\xff\xed\x05\x30\x27\x31\x51\x7a\xdb\xde\x69\xd5\x7d\x3b\x37\xa4\x55\xd4\x9d\x95\x9e\xce\xca\x1e\x68\x01\xcc\xb1\x0c\xc5\xe6\x68\x62\x24\x63\xf8\x22\x01\x5f\x40\x80\x80\x31\xca\x96\x41\xed\x1a\x13\x93\xb1\x20\x11\x98\x4a\xe9\x1a\xbf\x47\x2d\x11\x68\x09\x66\x38\x02\x01\x6c\x55\x75\xd9\xaf\x16\x4e\x8c\xa3\x14\x47\xc7\x34\x38\xad\xfb\x4b\xe2\x2e\x0a\x83\x57\x92\x30\x50\xf5\x23\x98\x84\x2b\x7f\x77\xaf\x24\x70\xd1\x27\x05\xcf\x4a\x29\x10\x78\x51\x0f\xbe\xb3\xd8\x57\xba\x9f\x8d\xca\x3a\xf3\x94\xd6\x70\xf8\x4a\x02\xab\xe0\x70\x01\xdd\x30\x3c\xff\xe9\x97\xcb\xd7\x3f\x67\x30\xbc\xfc\xed\xcd\xbf\xff\x7c\x3f\x04\x8c\x9f\x28\x93\x36\xf8\x94\x05\xb7\x0e\x89\x25\xdf\xdf\xc1\x30\xff\x75\xc0\x70\x95\x3c\x9f\x06\x0d\xcf\x33\x40\x66\xd5\xd7\x8d\xc8\x39\x0e\x79\x1d\x92\xe2\x34\x49\xf5\x73\xc1\x48\xbc\xd0\xae\x11\x3b\x32\x09\xb0\x80\xca\x10\x93\x6b\xc0\xf3\xe3\x1f\xe7\x3f\xbc\xc9\xc0\x73\xf1\xed\x5f\xe7\x5f\x0d\x9a\x64\xb3\xd4\xa6\x23\x94\xe1\xdb\x06\x9e\x92\xef\xef\xc0\x93\xff\x6e\xc5\x0c\xab\xbc\xb8\xeb\x1b\x60\xcb\x8d\xb5\xe4\xed\x6a\xbf\xec\x3b\x7a\x4b\x70\x2d\x5a\x09\x3d\x7e\x01\xbe\x58\x66\x55\x6d\xb9\x09\x30\x41\x6a\x70\xd2\xa8\x14\x9e\x60\x38\x00\x2f\xa6\x75\xa0\x75\xb5\xa5\x72\x15\xf8\x54\x32\x92\x5e\x06\x86\x8a\x7a\x39\x6f\xab\x3c\x89\x05\xa8\xbb\x46\x05\x39\x73\xca\x22\x2c\x72\xf2\x07\xf7\xda\xb5\x33\xf0\x81\x9c\xc0\x15\x69\xe7\x10\x07\x9e\x82\xce\xa0\xc0\x25\x17\x34\x6a\x26\xad\x6f\xed\x1a\xb9\xbc\xa5\x2e\x5d\xad\x16\x16\x94\x06\x8d\xbe\x59\xb8\x86\x19\xc3\x55\xbc\x69\x44\x40\x54\xe7\xdf\xc2\xa1\x03\x65\xae\xea\x4d\xa5\x6b\xb4\x0e\x9e\xde\x77\x82\x1d\xaa\xdb\xa7\x51\x94\x76\xd1\x61\x79\x4e\xa5\x9b\x7d\xbd\x9c\xe9\xda\x4a\xd0\xb7\x1a\x7a\x66\xa4\xe6\xc1\x4e\x99\x68\x7a\xd7\x37\x0f\x36\x08\x43\x89\xb7\x26\x20\xe2\x8b\xb7\x1e\x75\xb9\xbe\x77\x88\x39\x05\xa9\xe4\xc3\xba\x53\x2a\x8c\x83\x60\xb8\x70\xf2\x9c\xc6\x83\xfa\xc3\x4e\xcd\xa5\xe8\x7b\x43\xe3\x2e\xe4\x87\x86\x5e\xc8\x6f\x17\x7d\xcf\xca\x58\x35\x9a\x5d\xca\xe2\xa5\xdc\x0e\xac\xa5\xe8\xf2\x65\x66\x6b\xb9\x97\x24\x0e\x06\xce\xc8\xb8\xbe\x22\xd6\x05\xbb\xa7\xd7\x47\x1f\x6e\x9f\xe2\x65\xff\xcd\x16\xf2\x1d\xf2\x4c\x36\x45\xdc\xd3\xf1\xdd\xbb\x6d\x19\x5b\xb5\xa8\xd0\x36\x8d\xb0\x9a\x1b\x57\x99\x6b\x35\x52\xdd\xe0\xb7\xf6\x71\x1e\xe2\xfe\x3d\xb5\x71\xe1\xa2\x83\x60\x1b\xd2\xec\x83\xe7\xa0\x22\x65\x80\x05\x6c\xd7\xb1\x06\x55\xa3\x5b\xdd\xe5\xba\xea\x49\x83\x58\x46\x95\xd5\x5c\xb3\x26\x96\x5b\xbe\x5c\x3e\x32\x6d\xe3\x50\x9f\xb8\x4e\xf9\xf0\x89\x6e\x9b\x87\xd3\x99\x63\xb6\x1e\x7a\xce\x13\xcb\x35\x0e\xdb\x69\x47\xb6\x79\xa4\xdb\x15\x41\xd7\xd6\x27\xce\xd1\xd4\x76\x5b\x0f\x3d\xdb\xd4\xf7\x3f\x2d\x93\xf6\xcd\xb1\xf5\xd8\xb4\x2b\x67\xb6\x69\x98\xd6\xe3\x8a\x5a\xf3\xa9\x72\xfc\xc0\xac\xb2\xb9\x33\x7b\x52\x64\x77\x79\x49\x29\x5d\x31\xb3\x04\x6c\x48\x76\xdb\x97\xa0\x1b\xbd\x7c\x5d\xf1\xe5\xa3\xcf\x98\x1b\x2a\x7f\xcd\x77\x80\x8d\x2d\xd2\x0b\x09\xef\x1c\x3c\x6f\xff\x06\x51\x9b\x3a\x25\x25\xdb\x5f\x23\x8a\x75\x75\x50\xa3\x70\x66\x86\x61\x3a\x95\xb6\x60\xda\xf6\xd4\x2e\x1f\xcc\x1c\xd3\xf6\x26\x53\xd7\x33\x9f\x5a\x8e\xdb\xa0\x34\x4e\x8b\x66\xd3\x2e\xb3\xa4\x36\x28\xce\xe1\xf4\xa8\x5d\x26\xa5\x34\x4f\x1f\xce\x3a\xd8\x1f\xce\xda\x0f\xf5\x47\xd3\x59\xe1\xd7\x64\x3a\x3b\x38\x6c\x04\xf3\x40\x1f\xeb\x13\xc3\xec\x60\x59\xfa\xbe\x9e\x4d\x37\x8c\xd4\xce\x78\x6a\x3c\x6c\x15\x2f\x18\xd6\x27\xa8\xe0\x72\x5c\xdd\x35\x1b\xca\x52\x77\xd7\x2a\xaa\x70\xb4\x2b\xd9\x37\x0d\xeb\x91\x3e\xf6\x8e\x74\xdb\x31\x3d\xd3\xb6\x1b\xcd\x5b\x37\x5c\x6b\x3a\xf1\x3e\xd6\xad\xb1\xb9\xdf\x16\x64\xc3\xec\x78\x7a\x60\x39\xae\x65\x38\x9e\x31\xdd\x37\xdb\x5d\xab\xf1\x64\xf4\x75\xfd\xbc\xa8\xd3\x0d\x58\x68\xf9\xcc\xb5\x43\x47\xbf\x51\xeb\xd7\xf6\xcb\x44\xdb\xc7\xda\x9b\x37\xdf\x5a\x83\x49\xff\x02\x7e\x2c\xe7\x7a\x7c\xba\x8b\xcb\x8a\xdf\x93\x2c\x1c\xf2\xea\x4e\x70\x28\x37\xbd\xf3\x8e\x8d\xfe\xf8\x74\xf3\xeb\xaa\x7c\x8a\xde\x21\x44\xa8\x29\xe8\x1d\xdf\xba\x92\x1e\xfe\xa1\x30\x02\xce\xf1\x62\x10\x56\x02\x10\x98\x84\x57\xf6\x19\xaf\x5c\x52\x7d\xe6\xed\x48\xfd\x3b\x1b\xfd\x17\x00\x00\xff\xff\x0a\x2f\xa8\x73\x03\x22\x00\x00")

func proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json,
		"proto/micro_mall_logistics_proto/logistics_business/logistics_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_logistics_proto/logistics_business/logistics_business.swagger.json": proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_logistics_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"logistics_business": &_bintree_t{nil, map[string]*_bintree_t{
				"logistics_business.swagger.json": &_bintree_t{proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
