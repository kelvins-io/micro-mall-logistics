package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x8f\xdc\xc4\x13\xbf\xcf\xa7\x68\xf9\xff\x3f\xa2\x6c\x08\x88\x43\x6e\x8e\xd7\xec\x5a\x99\xcc\x2c\xb6\x27\x09\x42\x91\xd5\x6b\xd7\x4c\x3a\xb1\xdd\x4e\x3f\x16\x56\x68\x25\x38\xc2\x19\xb8\x70\x40\x42\xe2\xc0\x85\x44\xe2\x75\xe2\xe3\xb0\xc9\xc7\x40\xed\xb1\x67\xda\xaf\x19\x8f\x27\xab\x64\xa5\x8c\x14\x29\xee\x7a\x97\xeb\x57\x55\xed\xfd\x72\x84\x90\xc1\x3f\xc7\x8b\x05\x30\xe3\x36\x32\x6e\xdd\xb8\x69\xbc\xa7\xce\x48\x3a\xa7\xc6\x6d\xa4\xe8\x08\x19\x82\x88\x18\x14\x3d\x63\x54\xd0\x83\x84\x84\x8c\x06\x09\x8e\xe3\x20\xa6\x0b\xc2\x05\x09\x79\xb0\x24\xad\x9f\x4f\x25\x27\x29\x70\xde\x72\x74\x23\xe7\xcd\x0d\x21\x64\x9c\x01\xe3\x84\xa6\x4a\x7d\xf1\x5f\x94\x52\x81\x38\x08\x63\x84\xd0\x45\xee\x4e\x48\x53\x2e\x13\xe0\xc6\x6d\xf4\xd9\x52\x0a\x67\x59\x4c\x42\x2c\x08\x4d\x0f\x9e\x70\x9a\x2a\xde\x47\x39\x6f\xc6\x68\x24\xc3\x9e\xbc\x58\x3c\xe6\xeb\x38\x0f\xce\xde\x5f\xbb\x7b\xa0\xc4\xce\x57\x44\xc5\x4d\xb9\xd0\x9e\x55\xea\x64\x92\x60\xa6\x98\x8c\x97\xdf\xfd\xfe\xea\xf9\xdf\x2f\xbf\xf9\xf5\xf2\xcf\xaf\x8b\xd0\x72\x16\x9a\x01\xcb\x4d\x3b\x91\x62\x1b\x97\xea\xef\x14\xc9\xf0\x80\x9d\x91\x10\x02\x53\x59\x5b\x51\x75\x0d\x0c\x78\x46\x53\x0e\xbc\x62\x1b\x21\xe3\xd6\xcd\x9b\xb5\x23\x84\x8c\x08\x78\xc8\x48\x26\x8a\x94\x9a\x88\xcb\x30\x04\xce\xe7\x32\x46\xa5\xa6\x1b\x9a\xfa\x65\x1c\xe1\x63\x48\x70\x43\x19\x42\xc6\xff\x19\xcc\x95\x9e\xff\x1d\x44\x30\x27\x29\x51\x7a\xdb\xde\x69\xd5\x7d\xb7\x30\x64\x54\xd4\x5d\x68\x4f\x17\xba\x07\x46\x04\x73\x2c\x63\xb1\x3d\x9a\x14\xc9\x14\xbe\xc8\x20\x14\x10\x21\x60\x8c\xb2\x55\x50\xfb\xc6\xc4\x64\x2a\x48\x02\xb6\x52\xba\xc1\xef\x51\x4b\x04\x46\x86\x19\x4e\x40\x00\x5b\x57\xdd\xf2\x57\x0b\x27\xc5\x49\x8e\xa3\x53\x1a\x9d\xd7\xfd\x25\x69\x17\x85\xc1\x33\x49\x18\xa8\xfa\x11\x4c\xc2\x95\xbf\xbb\x67\x12\xb8\xe8\x93\x82\x47\x5a\x0a\x04\x5e\xd4\x83\xef\x2c\xf6\xb5\xee\x47\x23\x5d\x67\x91\xd2\x1a\x0e\x9f\x49\x60\x15\x1c\x2e\xa0\x1b\x86\x97\x3f\xfd\xf2\xea\xf9\xcf\x4b\x18\xbe\xfa\xed\xc5\xbf\xff\x7c\x3f\x04\x8c\x9f\x28\x93\x2e\x84\x94\x45\xd7\x0e\x89\x9a\xef\xef\x60\x58\xfc\x3a\x60\xb8\x4e\x5e\x48\xa3\x86\xe7\x4b\x40\x2e\xab\xaf\x1b\x91\x73\x1c\xf3\x3a\x24\xc5\x79\x96\xeb\xe7\x82\x91\x74\x61\xbc\x41\xec\xc8\x2c\xc2\x02\x2a\x43\x4c\x6e\x00\xcf\x8f\x7f\x5c\xfe\xf0\x62\x09\x9e\x97\xdf\xfe\x75\xf9\xd5\xa0\x49\x36\xcb\x6d\x7a\x42\x19\xbe\x6e\xe0\xd1\x7c\x7f\x07\x9e\xe2\x77\x2d\x66\x58\xe5\xc5\xbd\xb9\x01\xb6\xda\x58\x35\x6f\xd7\xfb\x65\xdf\xd1\xab\xc1\xb5\x6c\x25\xf4\xf4\x09\x84\x62\x95\x55\xb5\xe5\x66\xc0\x04\xa9\xc1\xc9\xa0\x52\x04\x82\xe1\x08\x82\x94\xd6\x81\xd6\xd5\x96\xf4\x2a\x08\xa9\x64\x24\xbf\x0c\x0c\x15\x0d\x0a\xde\x56\x79\x92\x0a\x50\x77\x8d\x0a\x72\xe6\x94\x25\x58\x14\xe4\x0f\x6e\xb5\x6b\x67\x10\x02\x39\x83\x2b\xd2\xce\x21\x8d\x02\x05\x9d\x41\x81\x4b\x2e\x68\xd2\x4c\x5a\xdf\xda\xb5\x0a\x79\x47\x5d\xba\x5a\x2d\x2c\x28\x8d\x1a\x7d\xb3\x74\x0d\x33\x86\xab\x78\x33\x88\x80\xa4\xce\xbf\x83\x43\x47\xca\x5c\xd5\x9b\x4a\xd7\x68\x1d\x3c\xbd\xef\x04\x7b\x54\x77\x48\x93\x24\xef\xa2\xc3\xf2\x9c\x4b\x37\xfb\xba\x9e\xe9\xda\x4a\xd0\xb7\x1a\x7a\x66\xa4\xe6\xc1\x5e\x99\x68\x7a\xd7\x37\x0f\x2e\x08\x4b\x89\xb7\x26\x20\xe1\x8b\xd7\x1e\xb5\x5e\xdf\x7b\xc4\x9c\x83\x54\xf2\x61\xdd\x29\x17\xc6\x51\x34\x5c\x38\x7b\x4c\xd3\x41\xfd\x61\xaf\xe6\x52\xf6\xbd\xa1\x71\x97\xf2\x43\x43\x2f\xe5\x77\x8b\xbe\x67\x65\xac\x1b\xcd\x3e\x65\xf1\x54\xee\x06\x56\x2d\xba\x62\x99\xd9\x59\xee\x29\x49\xa3\x81\x33\x32\xad\xaf\x88\x75\xc1\xee\xe9\xf5\xd1\x87\xbb\xa7\x78\xd5\x7f\x97\x0b\xf9\x1e\x79\x26\xdb\x22\xee\xe9\xf8\xfe\xdd\x56\xc7\x56\x2d\x2a\xb4\x4b\x23\xac\xe6\xc6\x57\xe6\x5a\x8d\x54\x37\xf8\x9d\x7d\x9c\xc7\xb8\x7f\x4f\x6d\x5c\xb8\xe8\x20\xd8\xc6\x74\xf9\xc1\x73\x50\x91\x32\xc0\x02\x76\xeb\x58\x83\xaa\xd1\xaf\xee\x72\x5d\xf5\x64\x40\x2a\x93\xca\x6a\x6e\x38\x13\xc7\xd7\x2f\x97\xf7\x6c\xd7\x3a\x36\x27\xbe\xa7\x1f\x3e\x30\x5d\xfb\x78\x3a\xf3\xec\xd6\xc3\xc0\x7b\xe0\xf8\xd6\x71\x3b\xed\xc4\xb5\x4f\x4c\xb7\x22\xe8\xbb\xe6\xc4\x3b\x99\xba\x7e\xeb\x61\xe0\xda\xe6\xe1\xa7\x3a\xe9\xd0\x1e\x3b\xf7\x6d\xb7\x72\xe6\xda\x96\xed\xdc\xaf\xa8\xb5\x1f\x2a\xc7\x8f\xec\x2a\x9b\x3f\x73\x27\x65\x76\x57\x97\x14\xed\x8a\xb9\x4c\xc0\x96\x64\xb7\x7d\x09\x7a\xab\x97\xaf\x2b\xbe\x7c\xf4\x19\x73\x43\xe5\xdf\xf0\x1d\x60\x6b\x8b\x0c\x62\xc2\x3b\x07\xcf\xeb\xbf\x41\xd4\xa6\x8e\xa6\x64\xf7\x6b\x44\xb9\xae\x0e\x6a\x14\xde\xcc\xb2\x6c\xaf\xd2\x16\x6c\xd7\x9d\xba\xfa\xc1\xcc\xb3\xdd\x60\x32\xf5\x03\xfb\xa1\xe3\xf9\x0d\x4a\xe3\xb4\x6c\x36\xed\x32\x2b\x6a\x83\xe2\x1d\x4f\x4f\xda\x65\x72\x4a\xf3\xf4\xee\xac\x83\xfd\xee\xac\xfd\xd0\xbc\x37\x9d\x95\x7e\x4d\xa6\xb3\xa3\xe3\x46\x30\x77\xcc\xb1\x39\xb1\xec\x0e\x96\x95\xef\x9b\xd9\x4c\xcb\xca\xed\x8c\xa7\xd6\xdd\x56\xf1\x92\x61\x73\x82\x4a\x2e\xcf\x37\x7d\xbb\xa1\x2c\x77\x77\xa3\xa2\x0a\x47\xbb\x92\x43\xdb\x72\xee\x99\xe3\xe0\xc4\x74\x3d\x3b\xb0\x5d\xb7\xd1\xbc\x4d\xcb\x77\xa6\x93\xe0\x63\xd3\x19\xdb\x87\x6d\x41\x36\xcc\x8e\xa7\x47\x8e\xe7\x3b\x96\x17\x58\xd3\x43\x5b\x73\x6d\x53\xbf\x2e\xeb\x70\x4b\xad\xb7\x7c\xc6\xda\xa3\x63\xbf\x55\xeb\xd5\xee\xcb\x42\xdb\xc7\xd8\xb7\x6f\x7e\xb5\x06\x93\xff\x85\xfb\x54\xce\xcd\xf4\x7c\x1f\x97\x15\x7f\x20\x59\x3c\xe4\xd5\x9d\xe1\x58\x6e\x7b\xe7\x1d\x1b\xfb\xe9\xf9\xf6\xd7\x55\xf9\xd4\xbc\x47\x88\x50\x53\xd0\x3b\xbe\x4d\x25\x3d\xfc\x43\x60\x02\x9c\xe3\xc5\x20\xac\x44\x20\x30\x89\xaf\xec\x33\x9d\x5e\x52\x7d\xe6\xe9\x48\xfd\xbb\x18\xfd\x17\x00\x00\xff\xff\x3c\xe4\x69\xa5\xe3\x21\x00\x00")

func proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json,
		"proto/micro_mall_logistics_proto/logistics_business/logistics_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_logistics_proto/logistics_business/logistics_business.swagger.json": proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_logistics_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"logistics_business": &_bintree_t{nil, map[string]*_bintree_t{
				"logistics_business.swagger.json": &_bintree_t{proto_micro_mall_logistics_proto_logistics_business_logistics_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
